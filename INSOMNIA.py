from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# список цитат
quotes = [
    "В этом изменчивом мире следует идти по пути самодисциплины.",
    "Даже если у человека нет особых талантов, но он упорно овладевает знанием, он не опозорится перед другими.",
    "Никогда и ни при каких обстоятельствах не лги.",
    "Может это будет и не быстро, но я этого добьюсь.",
    "Начинать заново - это нормально.\nНенормально - это притворяться счастливым, когда понимаешь, что живешь не той жизнью, какой хотелось бы.",
    "Лучшая месть - это никакая.",
    "Иногда, чтобы пойти правильно, все должно пойти не так.",
    "Всякая потеря - приобретение чего-то нового",
    "Нет большего счастья, чем чувствовать, что люди любят тебя и радуются твоему присутствию.",
    "Если человек не понимает твои мечты – он не твой человек.",
    "Никогда не надейся, что изменится кто-то другой.\nИзменения всегда нужно начинать с самого себя.",
    "Как ни изучай людей, в них всегда ошибешься.",
    "Скучать по кому-то — самое прекрасное из всех грустных чувств.",
    "От всякой беды есть два лекарства — время и молчание.",
    "Все будет хорошо, но все будет по-другому.",
    "При нескончаемом выборе - сначала выбирай себя.",
    "Никто не придёт, чтобы спасит тебя.\nТак что вствай!",
    "Надеюсь ты избавишься от всех проблем, о которых никому не говоришь.",
    "За Happy end - нужно бороться.",
    "Весь мир БДСМ, а ты забыл стоп-слово.",
    "Ты имеешь права на занятия в которых 'нет смысла', но есть удовольствие.",
    "Люблю ранее утро, так тихо и кажется, что все сдохли.",
    "Выходи из комнаты и совершай ошибки.",
    "Практикуйте хаотичное добро!",
    "В итоге все будет хорошо - это самый прекрасный спойлер.",
    "Надо быть аккуратным, помогая другим. Грань между быть полезным и быть использованным иногда неощутима.",
    "Трудно найти слова, когда действительно есть, что сказать.",
    "Истинная сущность человека яснее всего проявляется тогда, когда он думает, что его никто не видит.",
    "Жизнь одна - нехуй стесняться.",
    "Время - слышать себя.",
    "Бро, будь проще, этот мир не так жесток как ты думаешь.",
    "Ни в сказке сказать, ни пером описать\n(c) то, что говорили, перед тем, как придумали слово 'Пиздец'.",
    "На что только не согласится человек, ради еще одного интересного воспоминания"
]

# обработчик команды /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("получить цитатку", callback_data="get_quote")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "привет! я ботик для вдохновляющих цитаток. меня сделали криво, поэтому работаю я тоже криво\n\nнажми на кнопку ниже, чтобы получить одну:",
        reply_markup=reply_markup
    )

# обработчик нажатий кнопок
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "get_quote":
        # выбираем случайную цитату
        from random import choice
        quote = choice(quotes)

        # создаем кнопку заново
        keyboard = [
            [InlineKeyboardButton("получить ещё цитатку", callback_data="get_quote")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # отправляем сообщение с новой цитатой и кнопкой
        await query.edit_message_text(
            text=f"вот твоя цитатка:\n\n\"{quote}\"",
            reply_markup=reply_markup
        )


# основная функция
def main():
    # токен, который ты получил у BotFather
    token = "тут мой токен на бота"

    # создаем приложение
    app = Application.builder().token(token).build()

    # добавляем обработчики
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    # запускаем бота
    app.run_polling()

if __name__ == "__main__":
    main()